# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for determining changed files

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install pip
      run: |
        python -m pip install --upgrade pip

    - name: Install Poetry
      uses: snok/install-poetry@v1.3.3
      with:
        version: 1.5.0
        virtualenvs-create: true

    - name: Configure poetry
      run: |
        poetry config virtualenvs.in-project true

    - name: Poetry Cache
      uses: actions/cache@v4
      id: poetry-cache
      with:
        path: .venv
        key: venv-${{ hashFiles('**/poetry.lock') }}

    # This is from <https://github.com/python-poetry/poetry/blob/639d5e057/.github/workflows/main.yml#L57-L60>
    - name: Ensure cache is healthy
      if: steps.poetry-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        timeout 10s poetry run pip --version || rm -rf .venv

    - name: Install dependencies
      run: |
        poetry install -E all

    - name: Get changed Python files
      id: changed-py-files
      shell: bash
      run: |
        # Set the base SHA based on the event type
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          BASE_SHA=${{ github.event.pull_request.base.sha }}
        else
          BASE_SHA=$(git rev-parse HEAD~1)
        fi

        # Get changed files
        CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRT $BASE_SHA ${{ github.sha }} | grep '\.py$' | grep '^tdwii_plus_examples/' || echo "")

        # Filter out excluded files
        EXCLUDED_FILES="tdwii_plus_examples/tdd/ui_tdd.py tdwii_plus_examples/rtbdi_creator/ui_form.py tdwii_plus_examples/TDWII_PPVS_subscriber/ui_tdwii_ppvs_subscriber.py"
        FILTERED_FILES=""

        if [ -n "$CHANGED_FILES" ]; then
          for file in $CHANGED_FILES; do
            if ! echo "$EXCLUDED_FILES" | grep -q "$file"; then
              FILTERED_FILES="$FILTERED_FILES $file"
            fi
          done
        fi

        # Store in output variables
        echo "filtered_files=${FILTERED_FILES}" >> $GITHUB_OUTPUT
        echo "all_files=${CHANGED_FILES}" >> $GITHUB_OUTPUT

        # For debugging
        echo "Changed Python files in tdwii_plus_examples: ${CHANGED_FILES}"
        echo "After exclusions: ${FILTERED_FILES}"

    - name: Lint with flake8 (strict check on changed files only)
      if: steps.changed-py-files.outputs.all_files != ''
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        echo "Running strict flake8 on changed files"
        flake8 "${{ steps.changed-py-files.outputs.all_files }}" --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Lint with flake8 (relaxed check on changed files only)
      if: steps.changed-py-files.outputs.filtered_files != ''
      run: |
        # Run with relaxed rules as warnings
        echo "Running relaxed flake8 on changed files (excluding UI files)"
        flake8 "${{ steps.changed-py-files.outputs.filtered_files }}" --count --extend-ignore=E203 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        poetry run pytest tdwii_plus_examples/tests
